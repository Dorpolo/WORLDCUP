
# Data Preperation
{
  #Required Packages
  {
    library(shiny)
    library(ggplot2)
    library(reshape2)
    library(plyr)
    library(dplyr)
    library(tidyr)
    library(shinythemes)
    library(DT)
    library(scales)
    library(visNetwork)
    library(lubridate)
    library(XML)
    library(RCurl)
    library(httr)
    library(kableExtra)
  }

  #Special 'home made' functions
  {
    # ggplot2 graph template
    my_theme <- function() {
      
      # Colors
      color.background = "white"
      color.text = "#22211d"
      
      # Begin construction of chart
      theme_bw(base_size=15) +
        
        # Format background colors
        theme(panel.background = element_rect(fill=color.background, color=color.background)) +
        theme(plot.background  = element_rect(fill=color.background, color=color.background)) +
        theme(panel.border     = element_rect(color=color.background)) +
        theme(strip.background = element_rect(fill=color.background, color=color.background)) +
        
        # Format the grid
        theme(panel.grid.major.y = element_blank()) +
        theme(panel.grid.minor.y = element_blank()) +
        theme(axis.ticks       = element_blank()) +
        
        # Format the legend
        theme(legend.position = "none") +
        
        # Format title and axis labels
        theme(plot.title       = element_text(color=color.text, size=20, face = "bold")) +
        theme(axis.title.x     = element_text(size=14, color="black", face = "bold")) +
        theme(axis.title.y     = element_text(size=14, color="black", face = "bold", vjust=1.25)) +
        theme(axis.text.x      = element_text(size=10, vjust=0.5, hjust=0.5, color = color.text)) +
        theme(axis.text.y      = element_text(size=10, color = color.text)) +
        theme(strip.text       = element_text(face = "bold")) +
        
        # Plot margins
        theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
    }
    
    ## Points counter per game per user
    worldcup_points <- function(x)
    {
      if(x$started %in% c("TRUE"))
      {
        user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
        true <- c(x$true_Away_Goals,x$true_Away_Goals,x$true_Direction)
        if(x$Stage == "Group Stage")
        {
          return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
        }else{
          return(ifelse(sum(user == true) == 3 ,
                        4,
                        ifelse(user[3] == true[3] | (user[1:2] == true[1:2] & user[3] != true[3]),
                               1,
                               0)))
        }
      }else{return(0)}
    }
    
    # Special colurs
    worldcup_palette <- list(backround =   list(main = "#4e5d6c"),
                             lines =       list(darkblue = "#2b3e50",
                                                red_cup =  "#a8251f",
                                                light_blue_cup = "#006da8"),
                             data_labels = list(darkblue = "#00384A",
                                                light_green = "#B0D494",
                                                light_brune = "#B6A78D"))
    
    cup_palate <- list(winner = '#82E0AA',
                       loser  = '#CD6155',
                       draw = '#EB984E',
                       game_over ='#FEF5E7',
                       future_game = '#F7F9F9')
    
    
    # Dor's Rank
    {
      bet_score <- c("5-4", "5-3", "5-2", "5-1", "5-0",
                     "4-3", "4-2", "4-1", "4-0",
                     "3-2", "3-1", "3-0", 
                     "2-1", "2-0",
                     "1-0",
                     "5-5", "3-3", "1-1", "0-0", "2-2", "4-4",
                     "0-1",
                     "0-2", "1-2",
                     "0-3", "1-3", "2-3",
                     "0-4", "1-4", "2-4", "3-4",
                     "0-5", "1-5", "2-5", "3-5", "4-5")
      
      color_type <- c(
        "Draw - Sweden" = "#FFCC33",
        "Draw - Switzerland" = "#D9163C",
        "Sweden" = "#FFCC33",
        "Switzerland" = "#D9163C",
        
        "Draw - Frane" = "#D9163C",
        "Draw - Argentina" = "9DBBE3",
        "France" = "#003849",
        "Argentina" = "#9DBBE3",
        
        "Draw - Uruguay" = "#1D3D72",
        "Draw - Portugal" = "#D9163C",
        "Uruguay" = "#1D3D72",
        "Portugal" = "#D9163C",
        
        "Draw - Spain" = "#FFCC33",
        "Draw - Russia" = "#D9163C",
        "Spain" = "#FFCC33",
        "Russia" = "#D9163C",
        
        "Draw - Denmark" = "gery",
        "Draw - Croatia" = "#D9163C",
        "Denmark" = "gery",
        "Croatia" = "#D9163C",
        
        "Draw - Japan" = "#D9163C",
        "Draw - Belgium" = "#FFCC33",
        "Japan" = "#D9163C",
        "Belgium" = "#FFCC33",
        
        "Draw - Brazil" = "#FFCC33",
        "Draw - Mexico" = "#2CA87B",
        "Brazil" = "#FFCC33",
        "Mexico" = "#2CA87B",
        
        "Draw - Colombia" = "#FFCC33",
        "Draw - England" = "#D9163C",
        "Colombia" = "#FFCC33",
        "England" = "#D9163C"
        
      )
    }
    
  }
  
  ### Loading Data Sets from Google Sheets
  {
    
    # All Paricipants
    User_ID <- read.csv(url(paste0('https://docs.google.com/spreadsheets/d/e/2PACX-1vQL0gZ2mopclMeHu-ARwd51v5KXss8CDz1VUrHN5fj3T7xbV-1dSsoz8',
                                   'VubHVHapK6RjYUHGq9LjXFS/pub?gid=0&single=true&output=csv')),
                        stringsAsFactors = FALSE)
    
    
    # All Games Fixtures + Resultes
    fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                    "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                    "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                         stringsAsFactors = FALSE)
    initial_fixtures <- fixtures
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                                active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      
    }
    
    # Users' score predictions - Group Stage
    resultes <- read.csv(url(  
      paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vQal_rn7C0AOiFL3l7wXt_57zpTCV8_",
             "1nXeFywKNdMI9ZfNXm9DonPVea20ymcE8aSzXvcETyxlIhu",
             "0/pub?gid=0&single=true&output=csv")),
      stringsAsFactors = FALSE)
    
    
    # Adjestment
    
    resultes  <- resultes  %>% select(-c(Winner,Top_Scorer))
    
    resultes <- resultes %>% left_join(User_ID %>% select(Full.Name,User_Nick),by = c('User.Name'='Full.Name'))
    
    # Users' score predictions - Knockout Stage
    resultes_knokout <- as.data.frame(read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vSQhJq_NwSlny",
                                                          "HcbHZE179aZSKZhEeW9U3PK3U835NU8TvVko2_5v7Sx1h14hv0auB1DgYWXINg",
                                                          "fPr-/pub?gid=0&single=true&output=csv"))),stringsAsFactors = FALSE)
    
    
    # Help table - Adjestment for the resultes_knokout
    
    knokout_col_adj <- fixtures %>% filter(Stage != "Group Stage") %>% 
      select(GameID,
             original_fixture_name = NameID.y)  %>% 
      mutate(resultes_knokout_name = (names(resultes_knokout)[-c(1,2)])[seq(1,32,by=2)])
    
    
    # List which holds all DFs
    
    all_df_list <- list(userID =   list(df = User_ID),
                        resultes = list(df = resultes),
                        fixtures = list(df = fixtures))
    
    # Final adjustments due to the read.csv which makes some problems...
    names(all_df_list$resultes$df) <- gsub("..."," - ",names(all_df_list$resultes$df),fixed = TRUE)
    names(all_df_list$resultes$df) <- gsub("."," ",names(all_df_list$resultes$df),fixed = TRUE)
    names(all_df_list$userID$df) <- gsub("."," ",names(all_df_list$userID$df),fixed = TRUE)
    
    
    
    
    # and we are all set for data manipulation
  }
  
  
  
  # resultes_edited - crucial data join between user's predictions & real results
  {
    # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
    
    resultes_edited <- all_df_list$resultes$df %>%
      melt(id = c("User Name","Submission ID")) %>%
      separate(variable,c("user_Home","user_Away")," - ") %>%
      separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
      mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                     ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                            "Away")),
             NameID = paste0(user_Home," - ",user_Away)) %>% 
      inner_join(fixtures,
                 by = c("NameID" = "NameID.y")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
    
    # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
    
    resultes_knokout_edited = resultes_knokout %>% 
      gather(variable, value, -c(User.Name,Submission.ID)) %>% 
      select(`User Name` = User.Name,
             `Submission ID` = Submission.ID,variable,value) %>% 
      filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
      mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
      group_by(`User Name`,`Submission ID`,Game) %>% 
      summarise(variable = paste0(value,collapse = ";")) %>% 
      separate(variable,c("variable","user_Direction_pre"),";") %>% 
      inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
      separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
      separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
      mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
      mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                          ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                                 "Away")),
             user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
      select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
      inner_join(all_df_list$fixtures$df,by = c("NameID" = "NameID.y")) %>% 
      left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
    
    # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
    
    resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
    
    # adding Points vector with the user's points for each user in each match
    
    # Empty vector
    user_game_points <- rep(NA,nrow(resultes_edited))
    
    # apply worldcup points function for each row in the results edited
    for(i in 1:nrow(resultes_edited)){
      user_game_points[i] <- worldcup_points(resultes_edited[i,])}
    
    user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                          boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                          winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                   as.numeric(true_Away_Goals),0))
    
  }
  
  # Extracting competition parameters 
  {
    N_users <- nrow(User_ID)
    N_games_complited = sum(fixtures$started == TRUE & fixtures$active == FALSE)
    N_games = sum(fixtures$started == TRUE)
  }
  
  
  
  # User's league table #asItStands 
  {
    league_standings <- user_results_validation %>% filter((Active_Included == "Complited Games" | Active_Included == 'Active Games')) %>% 
      group_by(`User_Nick`) %>% 
      summarise(Points = sum(user_game_points),
                Boom = sum(boom),
                Winning_Goals = sum(winning_goals),
                Games = sum(started == TRUE)) %>% arrange(desc(Points),
                                                          desc(Boom),
                                                          desc(Winning_Goals)) %>% mutate(Rank = 1:N_users)
  }
  
  
  # Will serve us in the main user league output
  only_rank_for_vlookup <- league_standings %>% select(User_Nick,Rank)
  
  # Date Ranking for user rank graph
  date.id <- fixtures %>% select(Date,GameID) %>% arrange(GameID) %>% 
    distinct(Date,.keep_all = TRUE) %>% mutate(Day = rank(GameID)) %>% select(-GameID)
  
  # column adjusments (user_results_validation)
  {
    user_results_validation$user_Home_Goals <- as.numeric(user_results_validation$user_Home_Goals)
    user_results_validation$user_Away_Goals <- as.numeric(user_results_validation$user_Away_Goals)
    user_results_validation$true_Home_Goals <- as.numeric(user_results_validation$true_Home_Goals)
    user_results_validation$true_Away_Goals <- as.numeric(user_results_validation$true_Away_Goals)
    }
  
  
  
  # World Cup Teams Points Calculations (For the tab called "Users Prediction")
  {
    team_table_by_users_pre <- user_results_validation %>% filter(Stage == "Group Stage") %>% 
      mutate(Home_Real_Points = ifelse(user_Home_Goals>user_Away_Goals,3,
                                       ifelse(user_Home_Goals<user_Away_Goals,0,1)),
             Away_Real_Points = ifelse(Home_Real_Points == 3,0,
                                       ifelse(Home_Real_Points == 0,3,1))) %>% 
      mutate(GD_Home = user_Home_Goals-user_Away_Goals,
             GD_Away = -GD_Home) %>% 
      select(`User_Nick`,Group,Home=true_Home,Away=true_Away,Home_Real_Points,Away_Real_Points,GD_Home,GD_Away)
    
    home = team_table_by_users_pre %>% select(User = `User_Nick`,Group,Team = Home,Points = Home_Real_Points,GD = GD_Home)
    away = team_table_by_users_pre %>% select(User = `User_Nick`,Group,Team = Away,Points = Away_Real_Points,GD = GD_Away)
    
    
    team_table_by_users <- bind_rows(home,away)
  }
  
  ### All User Guesses ###
  {
    temp_resultes_knokout <- (resultes_knokout %>% 
                                select(`Submission ID` = Submission.ID,
                                       `User Name`=User.Name,everything()))[,
                                                                            c(1,2,seq(3,16*2+2,2))]
    
    names(temp_resultes_knokout)[-c(1,2)] <- initial_fixtures$NameID[49:64]
    
    
    
    user_guesses <- all_df_list$resultes$df %>% 
      select(-`Submission ID`) %>% 
      melt(id = 'User_Nick') %>% select(User = `User_Nick`,Match = variable, Resulte = value) %>%
      inner_join(all_df_list$fixtures$df %>% select(Match = NameID.y,Stage,Group,Date,Hour,GameID),
                 by = c("Match")) %>% select(User,GameID,Stage,Group,Date,Hour,Match,Resulte) %>% 
      arrange(GameID)
  }
  
  # 'Current' Parameters - current game, current game name, current cup rank, etc
  {
    ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
    
    current_game <- ifelse(all(resultes_edited$active == FALSE),
                           max(resultes_edited$GameID[which(resultes_edited$started==TRUE)])+1,
                           resultes_edited$GameID[which(resultes_edited$active == TRUE)[1]])
    
    current_Game_Name <- (resultes_edited %>% filter(GameID == current_game) %>% select(NameID))[1,1]
    
    current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
  }
  
  ### Data preperation for the "Rank users by competiton day" Graph
  {
    game_date_day_id <- fixtures %>% select(GameID,Date) %>% left_join(date.id,by = c('Date'))
    
    # current competiton date
    
    current_competition_day <- game_date_day_id$Day[which(game_date_day_id$GameID == current_game)][1]
    
    # Help Data Frame for the rank table
    
    user_results_validation_b <- user_results_validation %>% left_join(date.id,by = c('Date'))
    
    # Empty array for user ranks by competition day
    
    rank <- array(data = NA ,dim = c(N_users,current_competition_day),
                  dimnames = list(unique(resultes$User_Nick),1:current_competition_day))
    
    
    for(i in 1:current_competition_day)
    {
      league_standings <- user_results_validation_b %>% filter((Active_Included == "Complited Games" | Active_Included == 'Active Games') & Day.y <= i) %>% 
        group_by(User_Nick) %>% 
        summarise(Points = sum(user_game_points),
                  Boom = sum(boom),
                  Winning_Goals = sum(winning_goals),
                  Games = sum(started == TRUE)) %>% arrange(desc(Points),
                                                            desc(Boom),
                                                            desc(Winning_Goals)) %>% mutate(Rank = 1:N_users)
      for(j in 1:N_users)
      {
        
        rank[j,i] <- league_standings$Rank[which(league_standings$User_Nick == names(provideDimnames(rank)[,1])[j])]
      }
    }
    
    rank <- as.data.frame(cbind(row.names(rank),rank))
    rownames(rank) <- c()
    names(rank)[1] <- 'user'
    
    user_rank_by_day <- rank %>% melt(id = c('user')) %>% select(User=user,Day=variable,Rank=value) %>%
      mutate(alpha = 1,
             x   = ifelse(current_competition_day<7,0.975,ifelse(current_competition_day<15,0.85,0.75)) ,
             x.2 = ifelse(current_competition_day<7,current_competition_day+0.025,ifelse(current_competition_day<15,
                                                                                         current_competition_day+0.15,
                                                                                         current_competition_day+0.25) ))
    
    user_rank_by_day$Rank <- as.numeric(user_rank_by_day$Rank)
  }
  
  
  # all UI filter selection options
  {
    choices <- list(
      nameID = unique(fixtures$NameID.y)[c(current_game:64,1:(current_game-1))],
      userID = c(levels(sort(User_ID$`User_Nick`))),
      Cup = unique((fixtures %>% filter(Cup_Stage != "None"))$Cup_Stage)
    )
  }
  
}


# Define server logic required to draw a histogram
shinyServer(function(input, output) {
  

  autoInvalidate <- reactiveTimer(200000)
  
  # Genrate Offical User's League
  
  output$fz_league <- function() {
    
    autoInvalidate()
    
    # All Games Fixtures + Resultes
    fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                    "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                    "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                         stringsAsFactors = FALSE)
    
    all_df_list$fixtures$df <- fixtures
    
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown,
                                          winner) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                             active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction,winner)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      all_df_list$fixtures$df <- final
      
    }
    
    
    # resultes_edited - data join between user's predictions & real results
    {
      # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
      
      resultes_edited <- all_df_list$resultes$df %>%
        melt(id = c("User Name","Submission ID")) %>%
        separate(variable,c("user_Home","user_Away")," - ") %>%
        separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
        mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                       ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                              "Away")),
               NameID = paste0(user_Home," - ",user_Away)) %>% 
        inner_join(all_df_list$fixtures$df,
                   by = c("NameID"="NameID.y")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
      
      resultes_knokout_edited = resultes_knokout %>% 
        gather(variable, value, -c(User.Name,Submission.ID)) %>% 
        select(`User Name` = User.Name,
               `Submission ID` = Submission.ID,variable,value) %>% 
        filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
        mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
        group_by(`User Name`,`Submission ID`,Game) %>% 
        summarise(variable = paste0(value,collapse = ";")) %>% 
        separate(variable,c("variable","user_Direction_pre"),";") %>% 
        inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
        separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
        separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
        mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
        mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                            ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                                   "Away")),
               user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
        select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
        inner_join(all_df_list$fixtures$df,by = c("NameID"="NameID.y")) %>% 
        left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
      
      resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
      
      resultes_edited$user_Away_Goals <-   as.numeric(resultes_edited$user_Away_Goals)
      resultes_edited$user_Home_Goals <-   as.numeric(resultes_edited$user_Home_Goals)
      resultes_edited$true_Direction <- as.character(resultes_edited$true_Direction)
      
      # adding Points vector with the user's points for each user in each match
      
      # Empty vector
      user_game_points <- rep(NA,nrow(resultes_edited))
      
      

      worldcup_points <- function(x)
      {
        
        if(x$started %in% c("TRUE"))
        {
          user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
          true <- c(x$true_Home_Goals,x$true_Away_Goals,x$true_Direction)
          if(x$Stage == "Group Stage")
          {
            return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
          }else{
            
            x$user_Direction <- ifelse(x$user_Direction=='Home','1',ifelse(x$user_Direction=='Away','2','0'))
            user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
            true <- c(x$true_Home_Goals,x$true_Away_Goals,x$winner)
            
            return(
              
              ifelse(x$Active_Included == "Complited Games",
                     ifelse(sum(user == true) == 3,4,
                            ifelse(  ((user[3] == true[3]) | (sum(user[1:2] == true[1:2]) == 2)),1,0)),
                     ifelse((sum(user[1:2] == true[1:2]) == 2),4,
                            ifelse((sign(as.numeric(user[1])-as.numeric(user[2])) == sign(as.numeric(true[1])-as.numeric(true[2]))) & (sign(as.numeric(user[1])-as.numeric(user[2])) != 0 )
                                   ,1,0)
                     ))
              
            )           
          }
        }else{return(0)}
      }
      
      # apply worldcup points function for each row in the results edited
      for(i in 1:nrow(resultes_edited)){
        user_game_points[i] <- worldcup_points(resultes_edited[i,])}
      
      
      
      user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                            boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                            winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                     as.numeric(true_Away_Goals),0))
      
      
      
    }
    
    # THE OFFICAL LEAGUE TABLE - INCLUDING REAL TIME UPDATES #
    
    # User's league table #asItStands 
    {
      league_standings <- user_results_validation %>%  
        group_by(`User_Nick`) %>% 
        summarise(Points = sum(user_game_points),
                  Boom = sum(boom),
                  Winning_Goals = sum(winning_goals),
                  Games = sum(started == TRUE)) %>% arrange(desc(Points),
                                                            desc(Boom),
                                                            desc(Winning_Goals)) %>% mutate(Rank = 1:N_users)
    }
    
    # Will serve us in the main user league output
    only_rank_for_vlookup <- league_standings %>% select(User_Nick,Rank)
    
    data = user_results_validation %>% 
      group_by(`User_Nick`) %>% 
      summarise(Points = sum(user_game_points),
                Boom = sum(boom),
                WG = sum(winning_goals),
                Pct =  percent(sum(user_game_points)/(4*sum((Active_Included=="Complited Games" | Active_Included=="Active Games"))-sum((Active_Included=="Complited Games" | Active_Included=="Active Games") & Stage=="Group Stage"))),
                Games = sum(started == TRUE)) %>% 
      arrange(desc(Points),
              desc(Boom),
              desc(WG)) %>% 
      left_join(only_rank_for_vlookup,by = c("User_Nick")) %>% 
      left_join(User_ID %>% select(User_Nick,Img),by = c("User_Nick")) %>% 
      select(Rank,User=Img,Name = `User_Nick`,everything()) 
    
    prev_game_name <- fixtures$NameID.y[current_game-1]
    
    last_game_pts <- data.frame(User = unique(user_results_validation$User_Nick),
                                `Last Game Pts` = user_results_validation$user_game_points[which(user_results_validation$NameID == prev_game_name)])
    
    data_inc <- data %>% left_join(last_game_pts,by=c('Name'='User')) %>% select(everything(),`Last`=Last.Game.Pts) %>% 
      mutate(
        `Last Game` = cell_spec(Last, color = "white", align = "c", 
                                background = factor(Last, c(0, 1, 3), 
                                                    c("#F04A2C", "#5B76A9", "#2EBA4A")))
      ) %>% select(-Last)
    
    
    
    ##############  |Final Output| ###################
    
    kable(data_inc,escape = F,
          booktabs = T, align = "c", linesep = '') %>%
      kable_styling("striped", full_width = F) %>%
      row_spec(1:5, color = "#F05C2C") %>%
      row_spec(1,bold = T, color = "#F7DC6F") %>%
      scroll_box(box_css = "border: 1px solid #272B30; padding: 5px; ")
    
    
    ###################################################
    
    
  }
  
  # Reactive Data frame for the User predictions and the User Rank plot
  polo_3 <- reactive({user_rank_by_day %>% filter(`User` %in% input$userID)})
  
  # Select all configuration
  
  output$lineplot <- renderPlot({
    
    ggplot(data = polo_3(), aes(x = Day, y = Rank, group = User)) +
      geom_line(aes(color =  User,alpha = alpha), size = 2) +
      geom_point(aes(color = User,alpha = alpha), size = 4) +
      geom_point(color = "#FFFFFF", size = 1) +
      scale_y_reverse(breaks=1:N_users) + 
      scale_x_discrete(breaks = 1:current_competition_day, expand = c(.05, .05)) + 
      geom_text(data =  polo_3() %>% filter(Day == "1"),
                aes(label = User, x = x) , hjust = .85, color = "#00384A", size = 3) +
      geom_text(data = polo_3() %>% filter(Day == current_competition_day),
                aes(label = User, x = x.2) , hjust = 0.15, color = "#00384A", size = 3) +
      coord_cartesian(ylim = c(1,N_users)) + 
      theme(legend.position = "none") +
      labs(x = "Competition Days with games",
           y = "Rank",
           title = "World Cup as a Service",
           subtitle = "Users ranked by overall points after each competition Day") + my_theme()
    
  })
  
  polo_5 <- reactive({ 
    
    autoInvalidate()
    
    # All Games Fixtures + Resultes
    fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                    "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                    "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                         stringsAsFactors = FALSE)
    
    all_df_list$fixtures$df <- fixtures
    
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                                active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      all_df_list$fixtures$df <- final
      
    }
    
    # 'Current' Parameters - current game, current game name, current cup rank, etc
    {
      ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
      
      current_game <- ifelse(all(fixtures$active == FALSE),
                             max(fixtures$GameID[which(fixtures$started==TRUE)])+1,
                             fixtures$GameID[which(fixtures$active == TRUE)[1]])
      
      current_Game_Name <- (fixtures %>% filter(GameID == current_game) %>% select(NameID.y))[1,1]
      
      current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
    }
    
    ### All User Guesses ###
    {
      temp_resultes_knokout <- (resultes_knokout %>% 
                                  select(`Submission ID` = Submission.ID,
                                         `User Name`=User.Name,everything()))[,
                                                                              c(1,2,seq(3,16*2+2,2))]
      
      names(temp_resultes_knokout)[-c(1,2)] <- fixtures$NameID.y[49:64]
      
      
      
      user_guesses <- all_df_list$resultes$df %>% 
        select(-`Submission ID`) %>% 
        melt(id = 'User_Nick') %>% select(User = `User_Nick`,Match = variable, Resulte = value) %>%
        inner_join(fixtures %>% select(Match = NameID.y,Stage,Group,Date,Hour,GameID),
                   by = c("Match")) %>% select(User,GameID,Stage,Group,Date,Hour,Match,Resulte) %>% 
        arrange(GameID)
      
      user_guesses_ko <- (resultes_knokout %>% 
                            select(`Submission ID` = Submission.ID,
                                   `User Name`=User.Name,everything()))
      
      N_Users <- nrow(User_ID)
      
      sub_8 <- user_guesses_ko[1:N_Users,c(2,3:18)]
      sub_4 <- user_guesses_ko[(N_Users+1):(2*N_Users),c(2,(18+1):(4*2 + 18))]
      sub_2 <- user_guesses_ko[(2*N_Users+1):(3*N_Users),c(2,(18+1+8):(2*2 + 18+8))]
      sub_1 <- user_guesses_ko[(3*N_Users+1):(4*N_Users),c(2,(18+1+8+4):(2*2 + 18+8+4))]
      
      user_knockout_pred <- sub_8 %>% left_join(sub_4,by=c('User Name')) %>%
        left_join(sub_2,by=c('User Name')) %>%
        left_join(sub_1,by=c('User Name'))
      
      
      knockout_nameID <- data.frame(NameID.y = fixtures$NameID.y[49:64],
                                    old = (names(resultes_knokout)[-c(1,2)])[seq(1,32,2)])
      
      user_predictions_ko <- user_knockout_pred %>% left_join(User_ID %>% select(Full.Name,User_Nick),by=c('User Name' = 'Full.Name')) %>%
        select(User_Nick,everything()) %>% select(-`User Name`) %>%
        melt(id='User_Nick') %>% 
        mutate(var = ifelse(substr(as.character(variable),nchar(as.character(variable)),nchar(as.character(variable))) == "w",
                            substr(as.character(variable),1,nchar(as.character(variable))-1),
                            as.character(variable))) %>% select(-variable) %>% group_by(User_Nick ,var) %>%
        summarise(Prediction = paste0(value,collapse = "; ")) %>% left_join(knockout_nameID,by=c('var'='old')) %>% select(User_Nick,NameID.y,Prediction) %>%
        separate(Prediction,into = c('Prediction','Winner'),sep = "; ") %>% inner_join(fixtures %>% select(NameID.y,Date,Stage,Active_Included),by=c('NameID.y')) %>%
        select(User=User_Nick,Date,Match=NameID.y,Prediction,Winner,Active_Included)
      
      
      
    }
    
    user_predictions <- user_guesses %>% left_join(fixtures %>% select(GameID,Active_Included),by = c('GameID')) %>%
      select(User,Date,GameID,Stage,Group,Date,Hour,Match,Prediction = Resulte,Active_Included) 
    
    # User Guesses Tab II 
    
    if(current_game == 49)
    {
      order <- current_game:64
    }else{order <- rep(c(current_game:64,49:(current_game-1)))}
    
    
    game_order <- as.data.frame((fixtures  %>% select(NameID.y))[order,]) %>% mutate(ord = 1:16) 
    
    names(game_order) <- c('NameID','order')
    
    user_predictions_ko <- user_predictions_ko %>% left_join(game_order,by=c('Match'='NameID')) %>% arrange(order)
    
    user_predictions_ko %>% filter(User %in% input$userID)
    
  })
  
  
  output$user_choice <-  function() {  ##############  |Final Output| ###################
    
    resultes_cupwinner <-   read.csv(url(  
      paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vQal_rn7C0AOiFL3l7wXt_57zpTCV8_",
             "1nXeFywKNdMI9ZfNXm9DonPVea20ymcE8aSzXvcETyxlIhu",
             "0/pub?gid=0&single=true&output=csv")),
      stringsAsFactors = FALSE)
    
    
    
    # Adjestment
    resultes_cupwinner <- resultes_cupwinner %>% select(User.Name,Winner,Top_Scorer)
    resultes_cupwinner <- resultes_cupwinner %>% 
      left_join(User_ID %>% 
                  select(Full.Name,User_Nick),by = c('User.Name'='Full.Name')) %>% arrange(Winner,Top_Scorer) %>% 
      select(User=User_Nick,`Cup Winner`=Winner,`Top Scorer`=Top_Scorer) 
    
    
    kable(resultes_cupwinner,escape = F,
          booktabs = T, align = "c", linesep = '') %>%
      kable_styling("striped", full_width = F) %>%
      row_spec(1:nrow(resultes_cupwinner), color = "#F4D03F") 
    
    
    ###################################################
    
    
  }
  
  # User Guesses Tab Output II 
  
  output$user_guess <- renderDataTable({
    
    datatable(data = (polo_5() %>% mutate(finished = ifelse(Active_Included=="Complited Games",'Yes','No')) %>% select(-Active_Included)),
              options = list(pageLength = 48,
                             scrollY=TRUE,
                             searching = FALSE,
                             columnDefs = list(list(width = '10px', targets = "_all"),
                                               list(className = 'dt-center', targets = "_all"),
                                               list(visible = FALSE, targets=c(5,6)))), 
              rownames = FALSE,
              class = 'cell-border stripe') %>% 
      formatStyle("finished",
                  target = 'row',
                  backgroundColor  = styleEqual(c('Yes','No'),c("#EAEDED","white")),
                  color = "#00384A") 
    
  })
  
  output$results_one <- function() {
    
    
    autoInvalidate()
    
    
    fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                    "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                    "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                         stringsAsFactors = FALSE)
    
    all_df_list$fixtures$df  <- fixtures
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                                active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      all_df_list$fixtures$df <- final
    }
    
    
    # resultes_edited - data join between user's predictions & real results
    {
      # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
      
      resultes_edited <- all_df_list$resultes$df %>%
        melt(id = c("User Name","Submission ID")) %>%
        separate(variable,c("user_Home","user_Away")," - ") %>%
        separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
        mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                       ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                              "Away")),
               NameID = paste0(user_Home," - ",user_Away)) %>% 
        inner_join(all_df_list$fixtures$df,
                   by = c("NameID"="NameID.y")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
      
      resultes_knokout_edited = resultes_knokout %>% 
        gather(variable, value, -c(User.Name,Submission.ID)) %>% 
        select(`User Name` = User.Name,
               `Submission ID` = Submission.ID,variable,value) %>% 
        filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
        mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
        group_by(`User Name`,`Submission ID`,Game) %>% 
        summarise(variable = paste0(value,collapse = ";")) %>% 
        separate(variable,c("variable","user_Direction_pre"),";") %>% 
        inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
        separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
        separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
        mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
        mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                            ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                                   "Away")),
               user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
        select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
        inner_join(all_df_list$fixtures$df,by = c("NameID"="NameID.y")) %>% 
        left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
      
      resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
      
      resultes_edited$user_Away_Goals <-   as.numeric(resultes_edited$user_Away_Goals)
      resultes_edited$user_Home_Goals <-   as.numeric(resultes_edited$user_Home_Goals)
      resultes_edited$true_Direction <- as.character(resultes_edited$true_Direction)
      
      # adding Points vector with the user's points for each user in each match
      
      # Empty vector
      user_game_points <- rep(NA,nrow(resultes_edited))
      
      worldcup_points <- function(x)
      {
        
        if(x$started %in% c("TRUE"))
        {
          user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
          true <- c(x$true_Home_Goals,x$true_Away_Goals,x$true_Direction)
          if(x$Stage == "Group Stage")
          {
            return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
          }else{
            
            x$user_Direction <- ifelse(x$user_Direction=='Home','1',ifelse(x$user_Direction=='Away','2','0'))
            user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
            true <- c(x$true_Home_Goals,x$true_Away_Goals,x$winner)
            
            return(
              
              ifelse(x$Active_Included == "Complited Games",
                     ifelse(sum(user == true) == 3,4,
                            ifelse(  ((user[3] == true[3]) | (sum(user[1:2] == true[1:2]) == 2)),1,0)),
                     ifelse((sum(user[1:2] == true[1:2]) == 2),4,
                            ifelse((sign(as.numeric(user[1])-as.numeric(user[2])) == sign(as.numeric(true[1])-as.numeric(true[2]))) & (sign(as.numeric(user[1])-as.numeric(user[2])) != 0 )
                                   ,1,0)
                     ))
              
            )           
          }
        }else{return(0)}
      }
      
      
      # apply worldcup points function for each row in the results edited
      for(i in 1:nrow(resultes_edited)){
        user_game_points[i] <- worldcup_points(resultes_edited[i,])}
      
      
      
      user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                            boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                            winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                     as.numeric(true_Away_Goals),0))
      
      
      
    }
    
    ##
    
    r_16 <- resultes_knokout[1:N_users,2:18]
    r_8  <- resultes_knokout[(N_users+1):(2*N_users),c(2,19:26)]
    r_4  <- resultes_knokout[(2*N_users+1):(3*N_users),c(2,27:30)]
    r_2  <- resultes_knokout[(3*N_users+1):(5*N_users),c(2,31:34)]
    
    knokout <- r_16 %>% inner_join(r_16) %>%
      inner_join(r_8) %>%
      inner_join(r_4) %>%
      inner_join(r_2) %>% left_join(User_ID %>% select(Full.Name,User_Nick),by=c('User.Name'='Full.Name')) %>%
      select(-User.Name) %>% select(User = User_Nick,everything())
    
    names_knok <- initial_fixtures$NameID[49:nrow(initial_fixtures)]
    dup_names_knok <- paste0(names_knok," - winner")
    names_oredr <- c(1,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32,17,33)
    
    names(knokout) <- c('User_Nick',c(names_knok,dup_names_knok))[names_oredr]
    
    
    # Extracting competition parameters 
    {
      N_users <- nrow(User_ID)
      N_games_complited = sum(fixtures$started == TRUE & fixtures$active == FALSE)
      N_games = sum(fixtures$started == TRUE)
    }
    
    # 'Current' Parameters - current game, current game name, current cup rank, etc
    {
      ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
      
      current_game <- ifelse(all(fixtures$active == FALSE),
                             max(resultes_edited$GameID[which(resultes_edited$started==TRUE)])+1,
                             resultes_edited$GameID[which(resultes_edited$active == TRUE)[1]])
      
      current_Game_Name <- (resultes_edited %>% filter(GameID == current_game) %>% select(NameID))[1,1]
      
      current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
    }
    
    
    all_games <- all_df_list$resultes$df %>% inner_join(knokout,
                                                        by = c('User_Nick'))
    
    
    
    test_game_pre_result <- all_games %>% select(User = 'User_Nick',current_Game_Name) 
    ##
    
    test_game <- test_game_pre_result %>% 
      separate(current_Game_Name,into = c('U1.Home','U1.Away'),remove = FALSE) %>%
      mutate(T.Home = as.numeric(fixtures$true_Home_Goals[which(initial_fixtures$NameID == current_Game_Name)]),
             T.Away = as.numeric(fixtures$true_Away_Goals[which(initial_fixtures$NameID == current_Game_Name)]),
             U.Home = as.numeric(U1.Home),
             U.Away = as.numeric(U1.Away),
             D.Home = T.Home-U.Home,
             D.Away = T.Away-U.Away) %>%
      filter(D.Home<= 0 & D.Away<=0) %>% select(User,current_Game_Name)
    
    true_result <- fixtures[which(initial_fixtures$NameID == names(test_game)[2]),
                            c(which(names(fixtures) == 'true_Home_Goals'),
                              which(names(fixtures)== 'true_Away_Goals'))]
    
    res_dist <- test_game %>% mutate(Home = true_result$true_Home_Goals,
                                     Away = true_result$true_Away_Goals) %>%
      separate(names(test_game)[2],into=c('H.Res','A.Res'),sep="-") %>% 
      mutate(Result = paste0(H.Res,"-",A.Res),
             dist = abs(as.numeric(Home)-as.numeric(H.Res)) + 
               abs(as.numeric(Away)-as.numeric(A.Res))) %>% select(User,Result,dist) %>%
      distinct(Result,dist)
    
    test_game_II <- test_game
    names(test_game_II) <- c('User','Result')
    
    user_predictions <-  test_game_II %>% left_join(res_dist) %>% arrange(dist) %>% left_join(User_ID %>% select(User = User_Nick,Img)) %>% select(User = Img,Name = User , Prediction = Result)
    
    
    
    
    ##############  |Final Output| ###################
    
    kable(user_predictions,escape = F,
          booktabs = T, align = "c", linesep = '') %>%
      kable_styling("striped", full_width = F) %>%
      row_spec(1:nrow(user_predictions), color = "#F6F4F5", background = "#393135") %>%
      scroll_box(height = "300px",box_css = "border: 1px solid #272B30; padding: 5px; ")
    
    
    ###################################################
    
    
  }
  
  ### Network Graph
  
  output$network <- renderVisNetwork({
    
    autoInvalidate()
    
    fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                    "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                    "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                         stringsAsFactors = FALSE)
    
    all_df_list$fixtures$df  <- fixtures
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                                active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      all_df_list$fixtures$df <- final
    }
    
    
    # resultes_edited - data join between user's predictions & real results
    {
      # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
      
      resultes_edited <- all_df_list$resultes$df %>%
        melt(id = c("User Name","Submission ID")) %>%
        separate(variable,c("user_Home","user_Away")," - ") %>%
        separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
        mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                       ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                              "Away")),
               NameID = paste0(user_Home," - ",user_Away)) %>% 
        inner_join(all_df_list$fixtures$df,
                   by = c("NameID"="NameID.y")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
      
      resultes_knokout_edited = resultes_knokout %>% 
        gather(variable, value, -c(User.Name,Submission.ID)) %>% 
        select(`User Name` = User.Name,
               `Submission ID` = Submission.ID,variable,value) %>% 
        filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
        mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
        group_by(`User Name`,`Submission ID`,Game) %>% 
        summarise(variable = paste0(value,collapse = ";")) %>% 
        separate(variable,c("variable","user_Direction_pre"),";") %>% 
        inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
        separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
        separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
        mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
        mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                            ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                                   "Away")),
               user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
        select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
        inner_join(all_df_list$fixtures$df,by = c("NameID"="NameID.y")) %>% 
        left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
      
      resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
      
      resultes_edited$user_Away_Goals <-   as.numeric(resultes_edited$user_Away_Goals)
      resultes_edited$user_Home_Goals <-   as.numeric(resultes_edited$user_Home_Goals)
      resultes_edited$true_Direction <- as.character(resultes_edited$true_Direction)
      
      # adding Points vector with the user's points for each user in each match
      
      # Empty vector
      user_game_points <- rep(NA,nrow(resultes_edited))
      
      
      
      worldcup_points <- function(x)
      {
        
        if(x$started %in% c("TRUE"))
        {
          user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
          true <- c(x$true_Home_Goals,x$true_Away_Goals,x$true_Direction)
          if(x$Stage == "Group Stage")
          {
            return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
          }else{
            
            x$user_Direction <- ifelse(x$user_Direction=='Home','1',ifelse(x$user_Direction=='Away','2','0'))
            user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
            true <- c(x$true_Home_Goals,x$true_Away_Goals,x$winner)
            
            return(
              
              ifelse(x$Active_Included == "Complited Games",
                     ifelse(sum(user == true) == 3,4,
                            ifelse(  ((user[3] == true[3]) | (sum(user[1:2] == true[1:2]) == 2)),1,0)),
                     ifelse((sum(user[1:2] == true[1:2]) == 2),4,
                            ifelse((sign(as.numeric(user[1])-as.numeric(user[2])) == sign(as.numeric(true[1])-as.numeric(true[2]))) & (sign(as.numeric(user[1])-as.numeric(user[2])) != 0 )
                                   ,1,0)
                     ))
              
            )           
          }
        }else{return(0)}
      }
      
      # apply worldcup points function for each row in the results edited
      for(i in 1:nrow(resultes_edited)){
        user_game_points[i] <- worldcup_points(resultes_edited[i,])}
      
      
      
      user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                            boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                            winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                     as.numeric(true_Away_Goals),0))
      
      
      
    }
    
    ##
    
    r_16 <- resultes_knokout[1:N_users,2:18]
    r_8  <- resultes_knokout[(N_users+1):(2*N_users),c(2,19:26)]
    r_4  <- resultes_knokout[(2*N_users+1):(3*N_users),c(2,27:30)]
    r_2  <- resultes_knokout[(3*N_users+1):(5*N_users),c(2,31:34)]
    
    knokout <- r_16 %>% inner_join(r_16) %>%
      inner_join(r_8) %>%
      inner_join(r_4) %>%
      inner_join(r_2) %>% left_join(User_ID %>% select(Full.Name,User_Nick),by=c('User.Name'='Full.Name')) %>%
      select(-User.Name) %>% select(User = User_Nick,everything())
    
    names_knok <- initial_fixtures$NameID[49:nrow(initial_fixtures)]
    dup_names_knok <- paste0(names_knok," - winner")
    names_oredr <- c(1,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32,17,33)
    
    names(knokout) <- c('User_Nick',c(names_knok,dup_names_knok))[names_oredr]
    
    
    # Extracting competition parameters 
    {
      N_users <- nrow(User_ID)
      N_games_complited = sum(fixtures$started == TRUE & fixtures$active == FALSE)
      N_games = sum(fixtures$started == TRUE)
    }
    
    # 'Current' Parameters - current game, current game name, current cup rank, etc
    {
      ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
      
      current_game <- ifelse(all(fixtures$active == FALSE),
                             max(resultes_edited$GameID[which(resultes_edited$started==TRUE)])+1,
                             resultes_edited$GameID[which(resultes_edited$active == TRUE)[1]])
      
      current_Game_Name <- (resultes_edited %>% filter(GameID == current_game) %>% select(NameID))[1,1]
      
      current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
    }
    
    
    all_games <- all_df_list$resultes$df %>% inner_join(knokout,by = c('User_Nick'))
    
    
    test_game_pre_result <- all_games %>% select(User = 'User_Nick',current_Game_Name) 
    ##
    
    
    
    test_game <- test_game_pre_result %>% 
      separate(current_Game_Name,into = c('U1.Home','U1.Away'),remove = FALSE) %>%
      mutate(T.Home = as.numeric(fixtures$true_Home_Goals[which(initial_fixtures$NameID == current_Game_Name)]),
             T.Away = as.numeric(fixtures$true_Away_Goals[which(initial_fixtures$NameID == current_Game_Name)]),
             U.Home = as.numeric(U1.Home),
             U.Away = as.numeric(U1.Away),
             D.Home = T.Home-U.Home,
             D.Away = T.Away-U.Away) %>%
      filter(D.Home<= 0 & D.Away<=0) %>% select(User,current_Game_Name)
    
    true_result <- fixtures[which(initial_fixtures$NameID == names(test_game)[2]),
                            c(which(names(fixtures) == 'true_Home_Goals'),
                              which(names(fixtures)== 'true_Away_Goals'))]
    
    #### Special treatment to 0 or 1 remaining results
    
    N_test_game <- nrow(test_game)
    
    
    
    if(N_test_game == 1)
    {
      res_dist <- test_game %>% mutate(Home = true_result$true_Home_Goals,
                                       Away = true_result$true_Away_Goals) %>%
        separate(names(test_game)[2],into=c('H.Res','A.Res'),sep="-") %>% 
        mutate(Result = paste0(H.Res,"-",A.Res),
               dist = abs(as.numeric(Home)-as.numeric(H.Res)) + 
                 abs(as.numeric(Away)-as.numeric(A.Res))) %>% select(User,Result,dist) %>%
        distinct(Result,dist)
      
      
      user_dist <- data.frame(Result = test_game$User,
                              dist   = 1)
      
      dist_w = bind_rows(user_dist,res_dist) %>% 
        mutate(w = ifelse(grepl("-",Result),ifelse(dist == 0,2,dist^(-(1/2))),3),
               w2 = ifelse(grepl("-",Result),10*w,w))
      
      graph_array <- array(data = NA,dim = c(nrow(test_game),length(unique(test_game[,2]))))
      
      dimnames(graph_array)[[1]] <- list(as.character(test_game$User))
      dimnames(graph_array)[[2]] <- unique(test_game[,2])
    }else{
      if(N_test_game == 0)
      {
        test_game <- test_game_pre_result
        
        res_dist <- test_game %>% mutate(Home = true_result$true_Home_Goals,
                                         Away = true_result$true_Away_Goals) %>%
          separate(names(test_game)[2],into=c('H.Res','A.Res'),sep="-") %>% 
          mutate(Result = paste0(H.Res,"-",A.Res),
                 dist = abs(as.numeric(Home)-as.numeric(H.Res)) + 
                   abs(as.numeric(Away)-as.numeric(A.Res))) %>% select(User,Result,dist) %>%
          distinct(Result,dist)
        
        
        user_dist <- data.frame(Result = test_game$User,
                                dist   = 1)
        
        dist_w = bind_rows(user_dist,res_dist) %>% 
          mutate(w = ifelse(grepl("-",Result),ifelse(dist == 0,2,dist^(-(1/2))),3),
                 w2 = ifelse(grepl("-",Result),10*w,w))
        
        graph_array <- array(data = NA,dim = c(nrow(test_game),length(unique(test_game[,2]))))
        
        dimnames(graph_array)[[1]] <- as.character(test_game$User)
        dimnames(graph_array)[[2]] <- unique(test_game[,2])
      }else
      {
        res_dist <- test_game %>% mutate(Home = true_result$true_Home_Goals,
                                         Away = true_result$true_Away_Goals) %>%
          separate(names(test_game)[2],into=c('H.Res','A.Res'),sep="-") %>% 
          mutate(Result = paste0(H.Res,"-",A.Res),
                 dist = abs(as.numeric(Home)-as.numeric(H.Res)) + 
                   abs(as.numeric(Away)-as.numeric(A.Res))) %>% select(User,Result,dist) %>%
          distinct(Result,dist)
        
        
        user_dist <- data.frame(Result = test_game$User,
                                dist   = 1)
        
        dist_w = bind_rows(user_dist,res_dist) %>% 
          mutate(w = ifelse(grepl("-",Result),ifelse(dist == 0,2,dist^(-(1/2))),3),
                 w2 = ifelse(grepl("-",Result),10*w,w))
        
        graph_array <- array(data = NA,dim = c(nrow(test_game),length(unique(test_game[,2]))))
        
        dimnames(graph_array)[[1]] <- as.character(test_game$User)
        dimnames(graph_array)[[2]] <- unique(test_game[,2])
        
      }
    }
    
    for( i in 1:dim(graph_array)[1])
    {
      for(j in 1:dim(graph_array)[2])
      {
        graph_array[i,j] <- ifelse(test_game[i,2]==dimnames(graph_array)[[2]][j],1,0)
      }
      
    }
    
    names_1 <- data.frame(nms=dimnames(graph_array)[[1]])
    names_2 <- data.frame(nms=dimnames(graph_array)[[2]])
    N = nrow(names_1) + nrow(names_2)
    
    
    nodes <- bind_rows(names_1,names_2) %>% mutate(id = 1:N) %>% select(id,label = nms) %>% 
      left_join(dist_w %>% select(-c(w,dist)),by = c('label'='Result')) %>% 
      select(id,label,value = w2) %>% mutate(group = ifelse(grepl("-",label),'Result','User'),
                                             shpae = ifelse(grepl("-",label),'circle','star'),
                                             color = ifelse(grepl("-",label),'#B0D494','#9FB9E6'), 
                                             shadow = ifelse(grepl("-",label),TRUE,FALSE),
                                             font.color =ifelse(grepl("-",label),'#C0392B','#ECF0F1'),
                                             font.size = ifelse(grepl("-",label),value*5,value*10))
    
    
    edges <- graph_array %>% melt()  %>% filter(value!=0) %>%
      select(label_from = Var1,label_to = Var2) %>% 
      left_join(nodes %>% select(id,label),by = c('label_from'='label')) %>% 
      left_join(nodes %>% select(id,label),by = c('label_to'='label')) %>% select(from= id.x,to=id.y)
    
    
    visNetwork(nodes, edges,width = "100%",height  =600) %>% 
      visInteraction(dragNodes = TRUE, dragView = FALSE)
    
    
  })
  
  output$title <- renderUI({
    
    autoInvalidate()
    
    ##
    
    all_df_list$fixtures$df <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                                   "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                                   "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                                        stringsAsFactors = FALSE)
    
    fixtures <-  all_df_list$fixtures$df 
    
    
    ### Fixtures & Score API Joined 
    {
      fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vTNgD6oZivKRepzwPWDc",
                                      "YMg4tOQQq8B3sJLFdtHHE7p8lYs4lv_C4Wk_B3lkAPx-nZA",
                                      "4O6DETuEAhxw/pub?gid=0&single=true&output=csv")),
                           stringsAsFactors = FALSE)
      
      partial_fixtures <- fixtures %>% select(-c(started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction))
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      url <- 'https://perodriguezl-russia-2018-worldcup-tournament-v1.p.mashape.com/public/tournament/1'
      r <-  GET(url,add_headers(`X-Mashape-Key` = "GfEVgWsBovmshScrSarHgMWOihvjp17eUsvjsnwtfD1M1esYX9"))
      fixt <-  as.data.frame(t(as.data.frame(unlist(content(r)$data[[1]]))),
                             row.names = NULL)
      
      for( i in 2:64)
      {
        b <- as.data.frame(t(as.data.frame(unlist(content(r)$data[[i]]))),
                           row.names = NULL)
        fixt <- bind_rows(fixt,b)
      }
      
      data.frame(fixt$id,fixt$home.name,fixt$visitor.name,fixt$home_score,fixt$visitor_score)
      
      
      
      fixt$countdown <- as.numeric(fixt$countdown)
      fixtures$new_id <- as.character(fixtures$new_id)
      fixt_to_be_added <- fixt %>% select(GameID = id,
                                          true_Home_Goals = results.home ,
                                          true_Away_Goals = results.visitor ,
                                          finished,
                                          countdown,
                                          home.logo,
                                          visitor.logo,
                                          progress) %>% mutate(started = ifelse(countdown == 0,TRUE,FALSE),
                                                               active  = ifelse(finished  == FALSE & countdown == 0,TRUE,FALSE)) %>% 
        left_join(fixtures %>% select(new_id,NameID),by = c('GameID'='new_id'))   %>% mutate(Active_Included = ifelse(started == TRUE & active == FALSE,'Complited Games',
                                                                                                                      ifelse(started == TRUE & active == TRUE,'Active Games',
                                                                                                                             'Future Games'))) %>% 
        mutate(true_Direction  = ifelse(true_Home_Goals>true_Away_Goals,"Home",
                                        ifelse(true_Home_Goals<true_Away_Goals,"Away",
                                               "Draw"))) %>%
        select(GameID,NameID,countdown,finished,started,active,Active_Included,true_Home_Goals,true_Away_Goals,true_Direction,home.logo,
               visitor.logo,progress)
      
      partial_fixtures$new_id <- as.character(partial_fixtures$new_id)
      
      final <- partial_fixtures %>% inner_join(fixt_to_be_added,by = c('new_id'='GameID'))
      
      fixtures <- final
      all_df_list$fixtures$df <- final
    }
    
    # resultes_edited - data join between user's predictions & real results
    {
      # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
      
      resultes_edited <- all_df_list$resultes$df %>%
        melt(id = c("User Name","Submission ID")) %>%
        separate(variable,c("user_Home","user_Away")," - ") %>%
        separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
        mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                       ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                              "Away")),
               NameID = paste0(user_Home," - ",user_Away)) %>% 
        inner_join(all_df_list$fixtures$df,
                   by = c("NameID"="NameID.y")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
      
      resultes_knokout_edited = resultes_knokout %>% 
        gather(variable, value, -c(User.Name,Submission.ID)) %>% 
        select(`User Name` = User.Name,
               `Submission ID` = Submission.ID,variable,value) %>% 
        filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
        mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
        group_by(`User Name`,`Submission ID`,Game) %>% 
        summarise(variable = paste0(value,collapse = ";")) %>% 
        separate(variable,c("variable","user_Direction_pre"),";") %>% 
        inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
        separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
        separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
        mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
        mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                            ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                                   "Away")),
               user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
        select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
        inner_join(all_df_list$fixtures$df,by = c("NameID"="NameID.y")) %>% 
        left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
      
      # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
      
      resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
      
      resultes_edited$user_Away_Goals <-   as.numeric(resultes_edited$user_Away_Goals)
      resultes_edited$user_Home_Goals <-   as.numeric(resultes_edited$user_Home_Goals)
      resultes_edited$true_Direction <- as.character(resultes_edited$true_Direction)
      
      # adding Points vector with the user's points for each user in each match
      
      # Empty vector
      user_game_points <- rep(NA,nrow(resultes_edited))
      
      
      worldcup_points <- function(x)
      {
        
        if(x$started %in% c("TRUE"))
        {
          user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
          true <- c(x$true_Home_Goals,x$true_Away_Goals,x$true_Direction)
          if(x$Stage == "Group Stage")
          {
            return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
          }else{
            
            x$user_Direction <- ifelse(x$user_Direction=='Home','1',ifelse(x$user_Direction=='Away','2','0'))
            user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
            true <- c(x$true_Home_Goals,x$true_Away_Goals,x$winner)
            
            return(
              
              ifelse(x$Active_Included == "Complited Games",
                     ifelse(sum(user == true) == 3,4,
                            ifelse(  ((user[3] == true[3]) | (sum(user[1:2] == true[1:2]) == 2)),1,0)),
                     ifelse((sum(user[1:2] == true[1:2]) == 2),4,
                            ifelse((sign(as.numeric(user[1])-as.numeric(user[2])) == sign(as.numeric(true[1])-as.numeric(true[2]))) & (sign(as.numeric(user[1])-as.numeric(user[2])) != 0 )
                                   ,1,0)
                     ))
              
            )           
          }
        }else{return(0)}
      }
      
      
      # apply worldcup points function for each row in the results edited
      for(i in 1:nrow(resultes_edited)){
        user_game_points[i] <- worldcup_points(resultes_edited[i,])}
      
      
      
      user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                            boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                            winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                     as.numeric(true_Away_Goals),0))
      
      
      
    }
    
    ##
    
    # Extracting competition parameters 
    {
      N_users <- nrow(User_ID)
      N_games_complited = sum(fixtures$started == TRUE & fixtures$active == FALSE)
      N_games = sum(fixtures$started == TRUE)
    }
    
    # 'Current' Parameters - current game, current game name, current cup rank, etc
    {
      ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
      
      current_game <- ifelse(all(resultes_edited$active == FALSE),
                             max(resultes_edited$GameID[which(resultes_edited$started==TRUE)])+1,
                             resultes_edited$GameID[which(resultes_edited$active == TRUE)[1]])
      
      current_Game_Name <- (resultes_edited %>% filter(GameID == current_game) %>% select(NameID))[1,1]
      
      current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
    }
    
    text <- paste0(fixtures$true_Home[current_game],
                   " ",
                   fixtures$true_Home_Goals[current_game],
                   " - ",
                   fixtures$true_Away_Goals[current_game],
                   " ",
                   fixtures$true_Away[current_game])
    
    hour <- hour(Sys.time()) + 3
    
    minute <- ifelse(nchar(minute(Sys.time())) == 1,paste0(0,minute(Sys.time())),minute(Sys.time()))
    
    residual <- round((((fixtures$countdown[current_game] / 3600) - floor(fixtures$countdown[current_game]/(3600)))/1)*60,0)
    
    countdown_to <- ifelse(fixtures$countdown[current_game]/60 <= 60,
                           paste0('#countdown - ',round(fixtures$countdown[current_game]/(60),0)," minutes "),
                           paste0('#countdown - ',floor(fixtures$countdown[current_game]/(3600))," hours and ",residual,' minutes'))
    
    img_home <- paste0('<IMG SRC=',fixtures$home.logo[current_game],' WIDTH=24 HEIGHT=20>')
    
    img_away <- paste0('<IMG SRC=',fixtures$visitor.logo[current_game],' WIDTH=24 HEIGHT=20>')
    
    min <- ifelse(fixtures$progress[current_game] %in% c('full-time','future'),paste0(hour,":", minute),fixtures$progress[current_game])
    
    if(fixtures$countdown[current_game] == 0)
    {
      html_text <- paste0('<div style = "background-color: #F70443; width: 100%; height: 75px; border-radius: 4px;">
                          <center> <font size="4"> <font color="#F8F9F9"> Live Score : <br>',img_home," ",text," ",img_away,'<br>',min,
                          '</div>')
    }else{
      html_text <- paste0('<div style = "background-color: #F70443; width: 100%; height: 75px; border-radius: 4px;">
                          <center> <font size="4"> <font color="#F8F9F9"> Next Game : <br>',img_home," ",text," ",img_away,'<br>',countdown_to,
                          '</div>')
    }
    
    
    
    HTML(html_text)
    
    
    
    
    
    
  })

  ########### Dorki ################
  {
    next_game_tbl <- reactive({
      resultes_edited %>%
        filter(NameID %in% input$nameID) %>%
        mutate(team_direction = ifelse(user_Direction == "Away",
                                       user_Away,
                                       ifelse(user_Direction == "Home",
                                              user_Home, user_Direction))) %>%
        group_by(team_direction) %>%
        summarise(count = n()) %>%
        mutate(
          sum = sum(count),
          proportion = round(count / sum(count), 3) * 100
        )
    })
    
    
    
    
    #### Viz output I
    
    
    output$pre_game_I <- renderPlot({
      ggplot(next_game_tbl(), aes(y = proportion, x = "", fill = team_direction)) +
        geom_bar(width = 1, stat = "identity") +
        coord_polar(theta = "y") +
        geom_label(aes(label = paste(team_direction, "\n", round((count / sum * 100), 0), "%")),
                   position = position_stack(vjust = 0.5),
                   size = 2.5,
                   color = "white",
                   fontface = "bold"
        ) +
        scale_fill_manual(values = color_type) +
        theme(
          plot.margin = unit(c(0,0,0,0), "mm"),
          panel.grid.major = element_blank(),
          plot.background = element_rect(fill = "#272B30", colour = "#272B30"),
          plot.title = element_text(hjust = 0.5, size = 50),
          plot.subtitle = element_text(hjust = 0.5),
          panel.grid.minor = element_blank(),
          panel.background = element_rect(fill = "#272B30", colour = "#272B30"),
          axis.text.y = element_blank(),
          axis.ticks.x = element_blank(),
          axis.ticks.y = element_blank(),
          axis.title.y = element_blank(),
          axis.title.x = element_blank(),
          legend.position = "none",
          axis.text.x = element_blank()
        )
    })
    
    
    ### Score distribution 
    
    #### Data prep
    
    resultes_edited$bet_score <- with(resultes_edited, paste(user_Home_Goals,
                                                             "-",
                                                             user_Away_Goals,
                                                             sep = ""
    ))
    
    position_bar <- seq(1:length(bet_score))
    sort_by_helper <- as.data.frame(cbind(bet_score, position_bar))
    sort_by_helper$c <- as.character(sort_by_helper$bet_score)
    sort_by_helper$position_bar <- as.numeric(as.character(sort_by_helper$position_bar))
    
    
    
    ### Phase III
    {
      #### Table prep
      
      next_game_unique_res <- reactive({
        resultes_edited %>%
          filter(NameID == input$nameID) %>%
          mutate(team_direction = ifelse(user_Direction == "Away", user_Away,
                                         ifelse(user_Direction == "Home",user_Home, user_Direction))) %>% 
          select(bet_score, team_direction) %>%
          distinct(bet_score, team_direction)
      })
      
      
      
      next_game_scores <- reactive({resultes_edited %>% 
          mutate(team_direction = ifelse(user_Direction == "Away", user_Away,
                                         ifelse(user_Direction == "Home",user_Home, user_Direction))) %>% 
          filter(NameID == input$nameID) %>%
          group_by(bet_score, team_direction) %>%
          summarise(count = n()) %>% ungroup() %>% 
          mutate(
            sum = sum(count),
            proportion = round(count / sum(count), 3) * 100
          ) %>% 
          left_join(sort_by_helper, by = "bet_score") %>%
          arrange(desc(position_bar))%>%
          mutate(bet_score = factor(bet_score,
                                    levels = unique(bet_score[1:nrow(next_game_unique_res())])
          ))
      })
      
      
      
      
      ############## Viz output II
      
      output$pre_game_II <- renderPlot({
        par(bg = "#2b3e50")
        ggplot(next_game_scores(), aes(y = proportion, x = bet_score, fill = team_direction)) +
          geom_col() +
          scale_fill_manual(values = color_type) +
          geom_text(aes(label = count),
                    position = position_stack(vjust = 0.5),
                    size = 5, color = "white"
          ) +
          theme(
            plot.margin = unit(c(0,0,0,0), "mm"),
            panel.grid.major = element_blank(),
            plot.background = element_rect(fill = "#272B30", colour = "#272B30"),
            plot.title = element_text(hjust = 0.5, size = 20, color = "white"),
            plot.subtitle = element_text(hjust = 0.5),
            panel.grid.minor = element_blank(),
            panel.background = element_rect(fill = "#272B30", colour = "#272B30"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 16, color = "white"),
            axis.ticks.x = element_blank(),
            axis.ticks.y = element_blank(),
            axis.title.y = element_blank(),
            axis.title.x = element_blank(),
            legend.position = "none"
          ) +
          coord_flip()
      })
    }
    
    
    
    
    
    ############# Pre Game Name ###################
    
    output$game_name <- renderUI({
      
      game = as.character(input$nameID)
      HTML(paste0('<div style = "background-color: #F70443; width: 100%; height: 25px; border-radius: 4px;">
                  <center> <font size="4"> <font color="#F8F9F9">',game,
                  '</div>'))
      
      
      
    })
    
  }
  
  #####Title for Live Game #########

  
})

