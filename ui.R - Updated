

##### WorldCup Friends Zone - Shiny App #####

#Required Packages
{
  library(shiny)
  library(ggplot2)
  library(reshape2)
  library(plyr)
  library(dplyr)
  library(tidyr)
  library(shinythemes)
  library(DT)
  library(scales)
  library(visNetwork)
}

#Special 'home made' functions
{
  # ggplot2 graph template
  my_theme <- function() {
    
    # Colors
    color.background = "white"
    color.text = "#22211d"
    
    # Begin construction of chart
    theme_bw(base_size=15) +
      
      # Format background colors
      theme(panel.background = element_rect(fill=color.background, color=color.background)) +
      theme(plot.background  = element_rect(fill=color.background, color=color.background)) +
      theme(panel.border     = element_rect(color=color.background)) +
      theme(strip.background = element_rect(fill=color.background, color=color.background)) +
      
      # Format the grid
      theme(panel.grid.major.y = element_blank()) +
      theme(panel.grid.minor.y = element_blank()) +
      theme(axis.ticks       = element_blank()) +
      
      # Format the legend
      theme(legend.position = "none") +
      
      # Format title and axis labels
      theme(plot.title       = element_text(color=color.text, size=20, face = "bold")) +
      theme(axis.title.x     = element_text(size=14, color="black", face = "bold")) +
      theme(axis.title.y     = element_text(size=14, color="black", face = "bold", vjust=1.25)) +
      theme(axis.text.x      = element_text(size=10, vjust=0.5, hjust=0.5, color = color.text)) +
      theme(axis.text.y      = element_text(size=10, color = color.text)) +
      theme(strip.text       = element_text(face = "bold")) +
      
      # Plot margins
      theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
  }
  
  ## Points counter per game per user
  worldcup_points <- function(x)
  {
    if(x$started %in% c("TRUE"))
    {
      user <- c(x$user_Home_Goals,x$user_Away_Goals,x$user_Direction)
      true <- c(x$true_Home_Goals,x$true_Away_Goals,x$true_Direction)
      if(x$Stage == "Group Stage")
      {
        return(ifelse(sum(user == true) == 3,3,ifelse(user[3] == true[3],1,0)))
      }else{
        return(ifelse(sum(user == true) == 3 ,
                      4,
                      ifelse(user[3] == true[3] | (user[1:2] == true[1:2] & user[3] != true[3]),
                             1,
                             0)))
      }
    }else{return(0)}
  }
  
  # Special colurs
  worldcup_palette <- list(backround =   list(main = "#4e5d6c"),
                           lines =       list(darkblue = "#2b3e50",
                                              red_cup =  "#a8251f",
                                              light_blue_cup = "#006da8"),
                           data_labels = list(darkblue = "#00384A",
                                              light_green = "#B0D494",
                                              light_brune = "#B6A78D"))
  
  cup_palate <- list(winner = '#82E0AA',
                     loser  = '#CD6155',
                     draw = '#ED99E8',
                     game_over =' #515A5A',
                     future_game = '#515A5A')
  
  
  # Dor's Rank
  {
    bet_score <- c("5-4", "5-3", "5-2", "5-1", "5-0",
                   "4-3", "4-2", "4-1", "4-0",
                   "3-2", "3-1", "3-0", 
                   "2-1", "2-0",
                   "1-0",
                   "5-5", "3-3", "1-1", "0-0", "2-2", "4-4",
                   "0-1",
                   "0-2", "1-2",
                   "0-3", "1-3", "2-3",
                   "0-4", "1-4", "2-4", "3-4",
                   "0-5", "1-5", "2-5", "3-5", "4-5")
  }
  
}

### Loading Data Sets from Google Sheets
{
  
  # All Paricipants
  User_ID <- as.data.frame(read.csv(url(paste0('https://docs.google.com/spreadsheets/d/e/2PACX-1vSG0P3o9q0tK',
                                               'Hek7MJ7oFHOgmDy-1tBaG1eXVlg2Fbh64iDQafupr9JFlWZznyPjfg-Lf59WmTA3aV0/',
                                               'pub?gid=0&single=true&output=csv'))),
                           stringsAsFactors = FALSE)
  
  # All Games Fixtures + Resultes
  fixtures <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX",
                                  "-1vQ4jRITA24Oj_h-i4cVxEGstFTS7-qKH0bv_pp61h-Jj4G",
                                  "0t-fLh6TUiZU-Qor1WA2pt50TJkENnCkh/pub?gid=0&single=true&output=csv")),
                       stringsAsFactors = FALSE)
  
  # Users' score predictions - Group Stage
  resultes <- read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vSK-IscOIj9PGmqR1L9gE3WvZyB_",
                                  "bg7YUZrH128RQkURYoRY0RvCxRv_cTAEZCzRqc_0Pv2cgUJ1EiX/",
                                  "pub?gid=0&single=true&output=csv")),
                       stringsAsFactors = FALSE)
  
  
  
  # Adjestment
  
  resultes  <- resultes  %>% select(-c(Winner,Top_Scorer))
  resultes <- resultes %>% left_join(User_ID %>% select(Full.Name,User_Nick),by = c('User.Name'='Full.Name'))
  
  # Users' score predictions - Knockout Stage
  resultes_knokout <- as.data.frame(read.csv(url(paste0("https://docs.google.com/spreadsheets/d/e/2PACX-1vSkadUbrVQBA",
                                                        "-QGTzBipY49WPaGziS5uOox5hHx-Ib8vL5sCDNqiWfR1LYbcSZV6AgjlI8CiZxbbI5s/",
                                                        "pub?gid=0&single=true&output=csv"))),stringsAsFactors = FALSE)
  
  
  # Help table - Adjestment for the resultes_knokout
  
  knokout_col_adj <- fixtures %>% filter(Stage != "Group Stage") %>% 
    select(GameID,
           original_fixture_name = NameID)  %>% 
    mutate(resultes_knokout_name = (names(resultes_knokout)[-c(1,2)])[seq(1,32,by=2)])
  
  
  # List which holds all DFs
  
  all_df_list <- list(userID =   list(df = User_ID),
                      resultes = list(df = resultes),
                      fixtures = list(df = fixtures))
  
  # Final adjustments due to the read.csv which makes some problems...
  names(all_df_list$resultes$df) <- gsub("..."," - ",names(all_df_list$resultes$df),fixed = TRUE)
  names(all_df_list$resultes$df) <- gsub("."," ",names(all_df_list$resultes$df),fixed = TRUE)
  names(all_df_list$userID$df) <- gsub("."," ",names(all_df_list$userID$df),fixed = TRUE)
  
  
  # and we are all set for data manipulation
}

# resultes_edited - crucial data join between user's predictions & real results
{
  # Results edited join between the fixtures and the user results (Group Stage), for each user, in each game 
  
  resultes_edited <- all_df_list$resultes$df %>%
    melt(id = c("User Name","Submission ID")) %>%
    separate(variable,c("user_Home","user_Away")," - ") %>%
    separate(value,c("user_Home_Goals","user_Away_Goals"),"-") %>%
    mutate(user_Direction = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                   ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                          "Away")),
           NameID = paste0(user_Home," - ",user_Away)) %>% 
    inner_join(all_df_list$fixtures$df,
               by = c("NameID")) %>% left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
  
  # Results knokout edited join between the fixtures and the user results (knokout), for each user, in each game 
  
  resultes_knokout_edited = resultes_knokout %>% 
    gather(variable, value, -c(User.Name,Submission.ID)) %>% 
    select(`User Name` = User.Name,
           `Submission ID` = Submission.ID,variable,value) %>% 
    filter(!(value %in% c('NA',"") | is.na(value) ) ) %>% 
    mutate(Game = substr(variable,1,regexpr("_",variable)+1) ) %>% 
    group_by(`User Name`,`Submission ID`,Game) %>% 
    summarise(variable = paste0(value,collapse = ";")) %>% 
    separate(variable,c("variable","user_Direction_pre"),";") %>% 
    inner_join(knokout_col_adj,by = c('Game'='resultes_knokout_name')) %>%
    separate(original_fixture_name,c("user_Home","user_Away")," - ") %>% 
    separate(variable,c("user_Home_Goals","user_Away_Goals"),"-") %>% 
    mutate(NameID = paste0(user_Home," - ",user_Away)) %>% 
    mutate(user_dir_validation = ifelse(`user_Home_Goals`>`user_Away_Goals`,"Home",
                                        ifelse(`user_Home_Goals`==`user_Away_Goals`,"Draw",
                                               "Away")),
           user_Direction = ifelse(user_dir_validation == 'Draw',user_Direction_pre,user_dir_validation)) %>%
    select(`User Name`,`Submission ID`,user_Home,user_Away,user_Home_Goals,user_Away_Goals,user_Direction,NameID) %>%
    inner_join(all_df_list$fixtures$df,by = c("NameID")) %>% 
    left_join(User_ID %>% select(User = `Full.Name`,User_Nick),by = c('User Name'='User'))
  
  # Creating one version of truth - comparing between user predictions to real results and connect the Group Stage & Knokout bulks
  
  resultes_edited <- bind_rows(resultes_edited,resultes_knokout_edited)
  
  # adding Points vector with the user's points for each user in each match
  
  # Empty vector
  user_game_points <- rep(NA,nrow(resultes_edited))
  
  # apply worldcup points function for each row in the results edited
  for(i in 1:nrow(resultes_edited)){
    user_game_points[i] <- worldcup_points(resultes_edited[i,])}
  
  user_results_validation <- resultes_edited %>% mutate(user_game_points,
                                                        boom = ifelse(user_game_points>1,TRUE,FALSE),
                                                        winning_goals = ifelse(boom == TRUE,as.numeric(user_Home_Goals)+
                                                                                 as.numeric(true_Away_Goals),0))
  
}

# Extracting competition parameters 
{
  N_users <- nrow(User_ID)
  N_games_complited = sum(fixtures$started == TRUE & fixtures$active == FALSE)
  N_games = sum(fixtures$started == TRUE)
}

# User's league table #asItStands 
{
  league_standings <- user_results_validation %>% filter(Active_Included == "Complited Games") %>% 
    group_by(`User_Nick`) %>% 
    summarise(Points = sum(user_game_points),
              Boom = sum(boom),
              Winning_Goals = sum(winning_goals),
              Games = sum(started == TRUE)) %>% arrange(desc(Points),
                                                        desc(Boom),
                                                        desc(Winning_Goals)) %>% mutate(Rank = 1:N_users)
}

# Will serve us in the main user league output
only_rank_for_vlookup <- league_standings %>% select(User_Nick,Rank)

# Date Ranking for user rank graph
date.id <- fixtures %>% select(Date,GameID) %>% arrange(GameID) %>% 
  distinct(Date,.keep_all = TRUE) %>% mutate(Day = rank(GameID)) %>% select(-GameID)

# column adjusments (user_results_validation)
{
  user_results_validation$user_Home_Goals <- as.numeric(user_results_validation$user_Home_Goals)
  user_results_validation$user_Away_Goals <- as.numeric(user_results_validation$user_Away_Goals)
  user_results_validation$true_Home_Goals <- as.numeric(user_results_validation$true_Home_Goals)
  user_results_validation$true_Away_Goals <- as.numeric(user_results_validation$true_Away_Goals)
  }

# World Cup Teams Points Calculations (For the tab called "Users Prediction")
{
  team_table_by_users_pre <- user_results_validation %>% filter(Stage == "Group Stage") %>% 
    mutate(Home_Real_Points = ifelse(user_Home_Goals>user_Away_Goals,3,
                                     ifelse(user_Home_Goals<user_Away_Goals,0,1)),
           Away_Real_Points = ifelse(Home_Real_Points == 3,0,
                                     ifelse(Home_Real_Points == 0,3,1))) %>% 
    mutate(GD_Home = user_Home_Goals-user_Away_Goals,
           GD_Away = -GD_Home) %>% 
    select(`User_Nick`,Group,Home=true_Home,Away=true_Away,Home_Real_Points,Away_Real_Points,GD_Home,GD_Away)
  
  home = team_table_by_users_pre %>% select(User = `User_Nick`,Group,Team = Home,Points = Home_Real_Points,GD = GD_Home)
  away = team_table_by_users_pre %>% select(User = `User_Nick`,Group,Team = Away,Points = Away_Real_Points,GD = GD_Away)
  
  
  team_table_by_users <- bind_rows(home,away)
}

### All User Guesses ###
{
  temp_resultes_knokout <- (resultes_knokout %>% 
                              select(`Submission ID` = Submission.ID,
                                     `User Name`=User.Name,everything()))[,
                                                                          c(1,2,seq(3,16*2+2,2))]
  
  names(temp_resultes_knokout)[-c(1,2)] <- fixtures$NameID[49:64]
  
  
  
  user_guesses <- all_df_list$resultes$df %>% 
    select(-`Submission ID`) %>% 
    melt(id = 'User_Nick') %>% select(User = `User_Nick`,Match = variable, Resulte = value) %>%
    inner_join(all_df_list$fixtures$df %>% select(Match = NameID,Stage,Group,Date,Hour,GameID),
               by = c("Match")) %>% select(User,GameID,Stage,Group,Date,Hour,Match,Resulte) %>% 
    arrange(GameID)
}

# all UI filter selection options
{
  choices <- list(
    Round = unique(user_results_validation$Round),
    Group =unique(user_results_validation$Group),
    nameID = unique(user_results_validation$NameID),
    userID = c('Select All',levels(unique(sort(user_results_validation$`User_Nick`)))),
    Active =  unique(sort(user_results_validation$Active_Included)),
    Cup = unique((fixtures %>% filter(Cup_Stage != "None"))$Cup_Stage)
  )
}

# 'Current' Parameters - current game, current game name, current cup rank, etc
{
  ### Very Importent - If there is an active game will indicate on him, else - will indicate on the next comming game ### 
  
  current_game <- ifelse(all(resultes_edited$active == FALSE),
                         max(resultes_edited$GameID[which(resultes_edited$started==TRUE)])+1,
                         resultes_edited$GameID[which(resultes_edited$active == TRUE)[1]])
  
  current_Game_Name <- (resultes_edited %>% filter(GameID == current_game) %>% select(NameID))[1,1]
  
  current_cup_rank <-   fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
}

### Data preperation for the "Rank users by competiton day" Graph
{
  game_date_day_id <- fixtures %>% select(GameID,Date) %>% left_join(date.id,by = c('Date'))
  
  # current competiton date
  
  current_competition_day <- game_date_day_id$Day[which(game_date_day_id$GameID == current_game)][1]
  
  # Help Data Frame for the rank table
  
  user_results_validation_b <- user_results_validation %>% left_join(date.id,by = c('Date'))
  
  # Empty array for user ranks by competition day
  
  rank <- array(data = NA ,dim = c(N_users,current_competition_day),
                dimnames = list(resultes$User_Nick,1:current_competition_day))
  
  
  for(i in 1:current_competition_day)
  {
    league_standings <- user_results_validation_b %>% filter(Active_Included == "Complited Games" & Day.y <= i) %>% 
      group_by(User_Nick) %>% 
      summarise(Points = sum(user_game_points),
                Boom = sum(boom),
                Winning_Goals = sum(winning_goals),
                Games = sum(started == TRUE)) %>% arrange(desc(Points),
                                                          desc(Boom),
                                                          desc(Winning_Goals)) %>% mutate(Rank = 1:N_users)
    for(j in 1:N_users)
    {
      
      rank[j,i] <- league_standings$Rank[which(league_standings$User_Nick == names(provideDimnames(rank)[,1])[j])]
    }
  }
  
  rank <- as.data.frame(cbind(row.names(rank),rank))
  rownames(rank) <- c()
  names(rank)[1] <- 'user'
  
  user_rank_by_day <- rank %>% melt(id = c('user')) %>% select(User=user,Day=variable,Rank=value) %>%
    mutate(alpha = 1,
           x   = ifelse(current_competition_day<7,0.975,ifelse(current_competition_day<15,0.85,0.75)) ,
           x.2 = ifelse(current_competition_day<7,current_competition_day+0.025,ifelse(current_competition_day<15,
                                                                                       current_competition_day+0.15,
                                                                                       current_competition_day+0.25) ))
  
  user_rank_by_day$Rank <- as.numeric(user_rank_by_day$Rank)
}

##### Cup Data Preperation ####
{
  current_cup_stage <- fixtures$Cup_ID[which(fixtures$GameID == current_game)]  
  
  
  
  # Aggrgate points for each user in each cup stage
  cup_points <- user_results_validation %>% 
    select(User = `User_Nick`,
           GameID,
           CupID=Cup_ID,
           Points = user_game_points,
           Boom=boom,
           `Winning Goals` = winning_goals) %>% 
    mutate(CUPID = substr(CupID,1,1)) %>% 
    filter(CUPID != '0') %>%  mutate(User_Cup_ID = paste0(User,"_",CUPID)) %>% 
    left_join(resultes_edited %>% select(User=`User_Nick`,GameID,NameID,true_Home_Goals,true_Away_Goals,
                                         Home = user_Home_Goals,
                                         Away = user_Away_Goals),by=c('User','GameID')) %>% 
    mutate(Bet = paste0(Home,"-",Away),
           Result = paste0(true_Home_Goals,"-",true_Away_Goals)) %>% select(-c(true_Home_Goals,true_Away_Goals,Home,Away))
  
  
  ## Cup Data preperation - Round of 32
  {
    data_cup <- cup_points  %>% left_join(User_ID %>%  select(User = User_Nick,Draw_32)) %>% 
      arrange(Draw_32,User) %>% filter(GameID < 53) 
    
    
    vec <- c(rep(c(rep(TRUE,4),rep(FALSE,4)),4*32/8))
    
    data_cup_a <- data_cup[which(vec==TRUE),] %>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_32,Game=NameID,Result)
    data_cup_b <- data_cup[which(vec==FALSE),]%>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_32,Game=NameID,Result)
    
    
    the_data <- data_cup_a %>% 
      inner_join(data_cup_b,by=c('GameID','CupID','Game','Result','Draw_32')) %>% arrange(User.x,GameID) %>% 
      select(-c(GameID,CupID,Draw_32)) 
    
           }
  ## Cup Data preperation - Round of 16
  {
    user_phase_16 <- User_ID %>% filter(Draw_16 != 0) %>% select(User_Nick)
    
    data_cup_16 <- cup_points %>% filter(User %in% user_phase_16$User_Nick) %>% left_join(User_ID %>% select(User = User_Nick,Draw_16)) %>% 
      arrange(Draw_16,User) %>% filter(GameID >= 53 & GameID < 57)
    
    vec_16 <- c(rep(c(rep(TRUE,4),rep(FALSE,4)),4*16/8))
    
    data_cup_a_16 <- data_cup_16[which(vec_16==TRUE),] %>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_16,Game=NameID,Result)
    data_cup_b_16 <- data_cup_16[which(vec_16==FALSE),]%>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_16,Game=NameID,Result)
    
    
    the_data_16 <- data_cup_a_16 %>% 
      inner_join(data_cup_b_16,by=c('GameID','CupID','Game','Result','Draw_16')) %>% arrange(User.x,GameID) %>% 
      select(-c(GameID,CupID,Draw_16))
  }
  ## Cup Data preperation - Quarter Finals
  {
    user_phase_8 <- User_ID %>% filter(Draw_8 != 0) %>% select(User_Nick)
    
    data_cup_8 <- cup_points %>% filter(User %in% user_phase_8$User_Nick) %>% left_join(User_ID %>% select(User = User_Nick,Draw_8)) %>% 
      arrange(Draw_8,User) %>% filter(GameID >= 57 & GameID < 61)
    
    vec_8 <- c(rep(c(rep(TRUE,4),rep(FALSE,4)),4*8/8))
    
    data_cup_a_8 <- data_cup_8[which(vec_8==TRUE),] %>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_8,Game=NameID,Result)
    data_cup_b_8 <- data_cup_8[which(vec_8==FALSE),]%>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_8,Game=NameID,Result)
    
    
    the_data_8 <- data_cup_a_8 %>% 
      inner_join(data_cup_b_8,by=c('GameID','CupID','Game','Result','Draw_8')) %>% arrange(User.x,GameID) %>% 
      select(-c(GameID,CupID,Draw_8))
    
    
  }
  ## Cup Data preperation - Semi Finals
  {
    user_phase_4 <- User_ID %>% filter(Draw_4 != 0) %>% select(User_Nick)
    
    data_cup_4 <- cup_points %>% filter(User %in% user_phase_4$User_Nick) %>% left_join(User_ID %>% select(User = User_Nick,Draw_4)) %>% 
      arrange(Draw_4,User) %>% filter(GameID >= 61 & GameID < 63)
    
    vec_4 <- c(rep(c(rep(TRUE,2),rep(FALSE,2)),2*4/4))
    
    data_cup_a_4 <- data_cup_4[which(vec_4==TRUE),] %>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_4,Game=NameID,Result)
    data_cup_b_4 <- data_cup_4[which(vec_4==FALSE),]%>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_4,Game=NameID,Result)
    
    
    the_data_4 <- data_cup_a_4 %>% 
      inner_join(data_cup_b_4,by=c('GameID','CupID','Game','Result','Draw_4')) %>% arrange(User.x,GameID) %>%  
      select(-c(GameID,CupID,Draw_4))
    
  }
  ## Cup Data preperation - Finals
  {
    user_phase_2 <- User_ID %>% filter(Draw_2 != 0) %>% select(User_Nick)
    
    data_cup_2 <- cup_points %>% filter(User %in% user_phase_2$User_Nick) %>% left_join(User_ID %>% select(User = User_Nick,Draw_2)) %>% 
      arrange(Draw_2,User) %>% filter(GameID >= 63 & GameID <= 64)
    
    vec_2 <- c(rep(TRUE,2),rep(FALSE,2))
    
    data_cup_a_2 <- data_cup_2[which(vec_2==TRUE),] %>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_2,Game=NameID,Result)
    data_cup_b_2 <- data_cup_2[which(vec_2==FALSE),]%>% select(-c(CupID,User_Cup_ID)) %>% select(User,Bet,Points,Boom,WG=`Winning Goals`,GameID,CupID = CUPID,Draw_2,Game=NameID,Result)
    
    
    the_data_2 <- data_cup_a_2 %>% 
      inner_join(data_cup_b_2,by=c('GameID','CupID','Game','Result','Draw_2')) %>% arrange(User.x,GameID) %>%
      select(-c(GameID,CupID,Draw_2))
  }
  
  
  current_cup_rank <- fixtures$Cup_Rank[which(fixtures$GameID == current_game)]
  
  ### Function that generate cup ready data frame in a given dataset (which I created above)
  cup_gen <- function(x,n=60,k=4) # x is the relevant dataframe, n = N_users*number_of_games_in_stage/2 k = Number of games in cup Stage
  {
    the_data_img <- x %>% 
      left_join(User_ID %>% select(User_Nick,Img),by=c('User.x'='User_Nick')) %>% 
      left_join(User_ID %>% select(User_Nick,Img),by=c('User.y'='User_Nick')) %>% 
      select(User.x = Img.x,Bet.x,Pts.x=Points.x,Game,Result,User.y=Img.y,Bet.y,Pts.y=Points.y)
    
    names_x <- as.character(unique(the_data_img$User.x))
    names_y <- as.character(unique(the_data_img$User.y))
    n_user_div_2 <- length(names_y)
    
    the_data_img_con <- the_data_img %>%
      left_join(fixtures %>% select(NameID,Cup_Stage),by = c('Game'='NameID')) %>%
      group_by(User.x,Cup_Stage) %>%
      mutate(Agg.Pts.x = cumsum(Pts.x)) %>%  
      group_by(User.y,Cup_Stage) %>% 
      mutate(Agg.Pts.y = cumsum(Pts.y))  %>%  
      select(User.x,Bet.x,Pts.x ,Agg.Pts.x,Game,Result,Stage=Cup_Stage,User.y,Bet.y,Pts.y,Agg.Pts.y) %>%
      ungroup() %>% mutate(Rank = rep_len(c(rep(1,k),rep(0,k)),n))
    
    game_status <- fixtures %>% 
      select(Game = NameID,
             Active_Included,
             GameID,
             Stage = Cup_Stage) %>% 
      filter(GameID>48) 
    
    cup_col_by_user <- the_data_img_con %>% left_join(User_ID %>% 
                                                        select(User = User_Nick,Img),by = c('User.x'='Img')) %>%
      left_join(User_ID %>% 
                  select(User = User_Nick,Img),by = c('User.y'='Img')) %>% 
      select(User_x = User.x.x, Agg.Pts.x, Game,User_y = User.y.y,Agg.Pts.y) %>% 
      inner_join(user_results_validation %>% select(User=User_Nick,Game=NameID,boom,winning_goals),by=c('User_x'='User','Game'='Game')) %>%
      inner_join(user_results_validation %>% select(User=User_Nick,Game=NameID,boom,winning_goals),by=c('User_y'='User','Game'='Game')) %>%
      inner_join(game_status,by=c('Game')) %>% group_by(User_x,User_y) %>% 
      mutate(num = 1:k) %>% 
      group_by(User_x,Stage) %>% mutate(Agg.Boom.x = cumsum(boom.x),
                                        Agg.WG.x = cumsum(winning_goals.x)) %>% 
      group_by(User_y,Stage) %>% mutate(Agg.Boom.y = cumsum(boom.x),
                                        Agg.WG.y = cumsum(winning_goals.x))
    
    
    
    ###################
    
    ## TEST ##
    {
      polo_col <-  cup_col_by_user %>% mutate(
        col_user_x = ifelse(GameID < current_game, 
                            ifelse(num == k,
                                   ### If Stage games have been finished & we are in the last row of the knokout - we would like to see G/R/Y
                                   ifelse(Agg.Pts.x > Agg.Pts.y,cup_palate$winner,
                                          ifelse(Agg.Pts.x < Agg.Pts.y,cup_palate$loser,
                                                 ifelse(Agg.Boom.x > Agg.Boom.y ,cup_palate$winner,
                                                        ifelse(Agg.Boom.x < Agg.Boom.y,cup_palate$loser,
                                                               ifelse(Agg.WG.x > Agg.WG.y , cup_palate$winner,
                                                                      ifelse(Agg.WG.x < Agg.WG.y,cup_palate$loser,cup_palate$draw)))))),
                                   cup_palate$game_over),
                            ifelse(GameID == current_game,
                                   ifelse(Agg.Pts.x > Agg.Pts.y,cup_palate$winner,
                                          ifelse(Agg.Pts.x < Agg.Pts.y,cup_palate$loser,
                                                 ifelse(Agg.Boom.x > Agg.Boom.y ,cup_palate$winner,
                                                        ifelse(Agg.Boom.x < Agg.Boom.y,cup_palate$loser,
                                                               ifelse(Agg.WG.x > Agg.WG.y , cup_palate$winner,
                                                                      ifelse(Agg.WG.x < Agg.WG.y,cup_palate$loser,cup_palate$draw)))))),
                                   cup_palate$future_game))) %>%
        
        select(User_x,User_y,Stage,col_user_x,Game) %>% mutate(col_user_y = ifelse(col_user_x == cup_palate$loser,
                                                                                   cup_palate$winner,
                                                                                   ifelse(col_user_x == cup_palate$winner,cup_palate$loser,col_user_x)))
    }
    ##
    
    
    
    
    ###################
    
    the_data_img_con_Final <- the_data_img_con %>% left_join(User_ID %>% 
                                                               select(User = User_Nick,Img),by = c('User.x'='Img')) %>%
      left_join(User_ID %>% 
                  select(User = User_Nick,Img),by = c('User.y'='Img'))
    
    cup_col <- the_data_img_con_Final %>% left_join(polo_col %>% select(User_x,Game,col_user_x),
                                                    by = c('Game','User.x.x'='User_x')) %>% left_join(polo_col %>% select(User_y,Game,col_user_y),
                                                                                                      by = c('Game','User.y.y'='User_y')) 
    
    
    
    final_cup_table <- cup_col %>% select(-c(Stage,Stage.y,User_y,User.y.y,User.x.x)) %>% 
      select(`User I` = User.x,
             `Bet I` = Bet.x,
             `Pts I`=  Pts.x,
             `Agg.Pts I` = Agg.Pts.x,
             Game,
             Result,
             Stage = Stage.x,
             `User II` = User.y,
             `Bet II` = Bet.y,
             `Pts II`=  Pts.y,
             `Agg.Pts II` = Agg.Pts.y,
             col_user_x,col_user_y,Rank)
    
    return(final_cup_table)
    
  }
  
  
  ready_32 <- cup_gen(the_data,64,4)
  ready_16 <- cup_gen(the_data_16,32,4)
  ready_8 <- cup_gen(the_data_8,16,4)
  ready_4 <- cup_gen(the_data_4,4,2)
  ready_2 <- cup_gen(the_data_2,2,2)
  ready_data_cup <- bind_rows(ready_32,ready_16,ready_8,ready_4,ready_2) 
  
  
  
  
}


# Define UI for app that draws a histogram ----
ui <- fluidPage(theme = shinytheme("superhero"),

  # App title ----
  titlePanel("World Cup Friends Zone"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

   HTML('<img src="https://fsprdcdnpublic.azureedge.net/global-pictures/tournaments-sq-4/254645_w" height="95" width="130" align="middle">'),
                    HTML('<img src="http://farm2.staticflickr.com/1745/41637992304_5a17b268a9_b.jpg" height="95" width="170" align="middle">'),
                    
                        sliderInput(inputId ="game_number",
                                label ="Game Number:",
                                min = 1, max = 64,
                                value = c(1,N_games)),
                    
                    selectInput(inputId = "nameID",
                                label =  "Game :",
                                choices  = choices$nameID,
                                selected = current_Game_Name,
                                multiple = FALSE),
                    selectInput(inputId = "userID",
                                label =  "User:",
                                choices  = choices$userID,
                                selected = choices$userID[sample(31,1)],
                                multiple = TRUE),
 checkboxInput(inputId = "somevalue",
                                      label = h4("Active Games Included"),
                                      value = FALSE,
                                      width = validateCssUnit(200)),
    selectInput(inputId = "cup_round",
                                label =  "Cup Round:",
                                choices  = choices$Cup,
                                selected = choices$Cup[1],
                                multiple = TRUE),

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(


              tabsetPanel(type = "tabs",
                                tabPanel(title = "League Table",
                                         h4("Users League"),
                                         DT::dataTableOutput(outputId = "league_table"),
                                         br(),
                                         plotOutput(outputId = "lineplot",
                                                    click = "plot_click")),
         tabPanel(title = "Pre Game",
                                         h4("Pre Game Stats"),
                                         plotOutput(outputId = "pre_game_I", width = "250px", height = "250px"),
                                         plotOutput(outputId = "pre_game_II", width = "350px", height = "600px")),
                                tabPanel(title =  'Live Game',
                                         h4("Live Game Fan Zone"),
                                         DT::dataTableOutput(outputId = "result_table"),
                                         plotOutput(outputId = "distPlot")),
                                tabPanel(title =  'CUP',
                                         h2("CUP Zone"),
                                         DT::dataTableOutput(outputId = "cup_table")       
                                ),

                                tabPanel(title = "User Guesses",
                                         h4("All User Guesses"),
                                         DT::dataTableOutput(outputId = "user_guess"),
                                         br(),
                                         DT::dataTableOutput(outputId = "table.a")),
                                tabPanel(title = "Terms",
                                         uiOutput(outputId = "terms1"),
                                         uiOutput(outputId = "terms2"),
                                         uiOutput(outputId = "terms3"),
                                         uiOutput(outputId = "terms4"),
                                         uiOutput(outputId = "terms5"))
                                
                                
                    ) 
    )
  )
)





